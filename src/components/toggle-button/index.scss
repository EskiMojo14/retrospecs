@use "sass:map";
@use "~/theme";
@use "~/theme/typography";
@use "~/util";
@use "~/components/button/mixins" as button-mixins;
@use "~/components/button/variables" as button-variables;

.toggle-button {
  --button-text: #{rgb(var(--button-text-rgb))};
  --button-outline: #{rgb(var(--button-outline-rgb))};
  --button-fill: #{rgb(var(--button-fill-rgb))};
  --button-filled-text: #{rgb(var(--button-filled-text-rgb))};
  --button-filled-outline: #{rgb(var(--button-filled-outline-rgb))};
  --button-text: #{rgb(var(--button-text-rgb))};
  --outline-color: var(--button-text);
  border-radius: var(--border-radius);

  background: var(--background);
  color: var(--button-text);
  padding: button-variables.$padding;
  min-height: button-variables.$min-height;

  position: relative;

  text-wrap: nowrap;
  display: flex;
  justify-content: center;
  align-items: center;

  transition:
    opacity 200ms,
    outline 200ms,
    outline-offset 200ms;

  @include typography.style("button");
  @include button-mixins.colors("&[data-selected]");
  @include theme.outline;
  @include theme.focus-ring;

  @at-root button#{&} {
    appearance: none;
    border: none;
    &:focus:not([data-focus-visible]) {
      outline: none;
    }
  }
  @at-root a#{&} {
    text-decoration: none;
  }
  &--compact {
    padding: button-variables.$compact-padding;
    min-height: button-variables.$compact-min-height;
    .toggle-button__icon {
      &--leading {
        @include util.rtl-box(
          margin,
          0,
          button-variables.$compact-icon-spacing
        );
      }
      &--trailing {
        @include util.rtl-box(margin, button-variables.$compact-icon-spacing);
      }
    }
  }

  &[data-selected] {
    --button-text: var(--button-filled-text);
    --outline-color: var(--button-filled-outline);
    background: var(--button-fill);
  }
  &[data-disabled] {
    opacity: map.get(typography.$emphasis-map, disabled);
  }
  @include theme.ripple(
    $surface: " .toggle-button__ripple",
    $ripple-color: var(--button-text)
  );
  &__icon {
    position: relative;
    vertical-align: middle;
    &--leading {
      @include util.rtl-box(margin, 0, button-variables.$icon-spacing);
    }
    &--trailing {
      @include util.rtl-box(margin, button-variables.$icon-spacing);
    }
  }
}

.toggle-button-group {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 0.5rem;
}

.toggle-buttons {
  display: flex;
  .toggle-button {
    &:first-child {
      border-radius: var(--border-radius) 0 0 var(--border-radius);
      &::before {
        border-radius: var(--outline-border-radius) 0 0
          var(--outline-border-radius);
      }
    }
    &:last-child {
      border-radius: 0 var(--border-radius) var(--border-radius) 0;
      &::before {
        border-radius: 0 var(--outline-border-radius)
          var(--outline-border-radius) 0;
      }
    }
    &:not(:last-child):not(:first-child) {
      border-radius: 0;
      &::before {
        border-radius: 0;
      }
    }
  }
  @include util.rtl {
    .toggle-button {
      &:first-child {
        border-radius: 0 var(--border-radius) var(--border-radius) 0;
        &::before {
          border-radius: 0 var(--outline-border-radius)
            var(--outline-border-radius) 0;
        }
      }
      &:last-child {
        border-radius: var(--border-radius) 0 0 var(--border-radius);
        &::before {
          border-radius: var(--outline-border-radius) 0 0
            var(--outline-border-radius);
        }
      }
    }
  }
  &[data-orientation="vertical"] {
    flex-direction: column;
    .toggle-button {
      &:first-child {
        border-radius: var(--border-radius) var(--border-radius) 0 0;
        &::before {
          border-radius: var(--outline-border-radius)
            var(--outline-border-radius) 0 0;
        }
      }
      &:last-child {
        border-radius: 0 0 var(--border-radius) var(--border-radius);
        &::before {
          border-radius: 0 0 var(--outline-border-radius)
            var(--outline-border-radius);
        }
      }
      &:not(:last-child):not(:first-child) {
        border-radius: 0;
        &::before {
          border-radius: 0;
        }
      }
    }
  }
}
