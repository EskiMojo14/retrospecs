@use "sass:map";
@use "@/theme";
@use "@/theme/typography";
@use "@/util";
@use "@/components/button/mixins" as button-mixins;
@use "@/components/button/variables" as button-variables;

.toggle-button {
  --dark-rgb: var(--orange-dark-rgb);
  --light-rgb: var(--orange-light-rgb);
  --background-rgb: var(--dark-rgb);
  --background-alpha: 0;
  --background: #{rgba(var(--background-rgb), var(--background-alpha))};
  --outline: var(--button-text);
  --outline-width: #{button-variables.$outline-width};
  --border-radius: #{button-variables.$border-radius};
  border-radius: var(--border-radius);

  background: var(--background);
  color: var(--button-text);
  padding: button-variables.$padding-y button-variables.$padding-x;
  min-height: button-variables.$min-height;

  position: relative;

  text-wrap: nowrap;
  display: flex;
  justify-content: center;
  align-items: center;

  transition:
    background 200ms,
    outline 200ms,
    outline-offset 200ms;

  @include typography.style("button");

  @include button-mixins.ink("dark");
  @include button-mixins.outline;
  @include button-mixins.colors("toggle-button[data-selected]");
  @include theme.states;
  @include theme.focus-ring;

  @at-root button#{&} {
    appearance: none;
    border: none;
    &:focus:not([data-focus-visible]) {
      outline: none;
    }
  }
  @at-root a#{&} {
    text-decoration: none;
  }

  &[data-selected] {
    @include button-mixins.contained-ink("light");
  }
  &[data-disabled] {
    opacity: map.get(typography.$emphasis-map, disabled);
  }
}

.toggle-button-group {
  display: flex;
  .toggle-button {
    &:first-child {
      border-radius: var(--border-radius) 0 0 var(--border-radius);
      &::before {
        border-radius: var(--outline-border-radius) 0 0
          var(--outline-border-radius);
      }
    }
    &:last-child {
      border-radius: 0 var(--border-radius) var(--border-radius) 0;
      &::before {
        border-radius: 0 var(--outline-border-radius)
          var(--outline-border-radius) 0;
      }
    }
    &:not(:last-child):not(:first-child) {
      border-radius: 0;
      &::before {
        border-radius: 0;
      }
    }
  }
  @include util.rtl {
    .toggle-button {
      &:first-child {
        border-radius: 0 var(--border-radius) var(--border-radius) 0;
        &::before {
          border-radius: 0 var(--outline-border-radius)
            var(--outline-border-radius) 0;
        }
      }
      &:last-child {
        border-radius: var(--border-radius) 0 0 var(--border-radius);
        &::before {
          border-radius: var(--outline-border-radius) 0 0
            var(--outline-border-radius);
        }
      }
    }
  }
}
