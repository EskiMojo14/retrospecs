@use "sass:map";
@use "sass:meta";
@use "@/theme";
@use "@/util";
@use "./variables";

@mixin ink($color, $state-opacities: ()) {
  --button-text-rgb: #{if(
      meta.type-of($color) == "color",
      util.get-rgb($color),
      var(--#{$color}-rgb)
    )};
  --button-text: #{rgb(var(--button-text-rgb))};
}

@mixin contained-ink($color, $state-opacities: ()) {
  --background: #{color-mix(
      in srgb,
      if(meta.type-of($color) == "color", $color, rgb(var(--#{$color}-rgb)))
        calc(var(--background-alpha) * 100%),
      rgb(var(--background-rgb))
    )};

  --button-text-rgb: #{if(
      meta.type-of($color) == "color",
      util.get-rgb($color),
      var(--#{$color}-rgb)
    )};
}

@mixin outline {
  &::before {
    content: "";
    position: absolute;
    top: var(--outline-width);
    left: var(--outline-width);
    right: var(--outline-width);
    bottom: var(--outline-width);
    border: var(--outline-width) solid var(--outline);
    --outline-border-radius: calc(var(--border-radius) - var(--outline-width));
    border-radius: var(--outline-border-radius);
    pointer-events: none;
  }
}

@mixin color($color) {
  $dark-shade: if(
    meta.type-of($color) == "map" and map.has-key($color, "dark"),
    map.get($color, "dark"),
    "-dark"
  );
  $light-shade: if(
    meta.type-of($color) == "map" and map.has-key($color, "light"),
    map.get($color, "light"),
    "-light"
  );
  $name: if(meta.type-of($color) == "map", map.get($color, "color"), $color);
  --dark-rgb: var(--#{$name}#{$dark-shade}-rgb);
  --light-rgb: var(--#{$name}#{$light-shade}-rgb);
}

@mixin colors($filled-selector: "button--contained") {
  @include color(variables.$default-color);
  @each $variant, $color in variables.$color-map {
    &--#{$variant} {
      @include color($color);
    }
  }
  &--inverse {
    @include ink("light");
    --background-rgb: var(--light-rgb);
    &.#{$filled-selector} {
      @include contained-ink("dark");
    }
  }
}
