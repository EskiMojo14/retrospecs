@use "sass:map";
@use "sass:meta";
@use "@/theme";
@use "@/util";

@mixin ink($color, $state-opacities: ()) {
  --button-text-rgb: #{if(
      meta.type-of($color) == "color",
      util.get-rgb($color),
      var(--#{$color}-rgb)
    )};
  --button-text: #{rgb(var(--button-text-rgb))};
}

@mixin contained-ink($color, $state-opacities: ()) {
  --background: #{color-mix(
      in srgb,
      if(meta.type-of($color) == "color", $color, rgb(var(--#{$color}-rgb)))
        calc(var(--background-alpha) * 100%),
      rgb(var(--background-rgb))
    )};

  --button-text-rgb: #{if(
      meta.type-of($color) == "color",
      util.get-rgb($color),
      var(--#{$color}-rgb)
    )};
}

@mixin outline {
  &::before {
    content: "";
    position: absolute;
    top: var(--outline-width);
    left: var(--outline-width);
    right: var(--outline-width);
    bottom: var(--outline-width);
    border: var(--outline-width) solid var(--outline);
    --outline-border-radius: calc(var(--border-radius) - var(--outline-width));
    border-radius: var(--outline-border-radius);
    pointer-events: none;
  }
}

$color-map: (
  "success": "green",
  "warning": "yellow",
  "error": "red",
  "info": "blue",
);

@mixin colors($filled-selector: "button--contained") {
  @each $variant, $color in $color-map {
    &--#{$variant} {
      --dark-rgb: var(--#{$color}-dark-rgb);
      --light-rgb: var(--#{$color}-light-rgb);
    }
  }
  &--inverse {
    @include ink("light");
    --background-rgb: var(--light-rgb);
    &.#{$filled-selector} {
      @include contained-ink("dark");
    }
  }
}
